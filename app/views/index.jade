doctype html
html(lang='en')
	head
		meta(charset='utf-8')
		meta(http-equiv='Content-Type', content='text/html;charset=utf-8')
		meta(name='viewport', content='width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no')

		title Baba Grammar Designer by Lokaltog

		link(rel='shortcut icon', href='/static/img/favicon.png')
		link(rel='stylesheet', href='/static/css/main.css', type='text/css')

	body
		header
			h1
				.title Baba Grammar Designer
				.catchphrase
					.text
					.refresh
						i.icon.icon-refresh
			.actions
				.btn#import-grammar(href='#popup-import-grammar') Import grammar
				.btn(v-on='click: grammar = {}') Create new grammar

		#contents
			section.step.name-grammar
				.number 1
				.contents
					h1 Name your generator
					div.name
						input.input-text(type='text', v-model='grammar.name', placeholder='Grammar name', data-autosize-input)
						span.by by
						input.input-text(type='text', v-model='grammar.author', placeholder='Author', data-autosize-input)

			section.step.create-grammar
				.number 2
				.contents
					h1 Create the grammar
					section.grammar(v-component='grammar', v-with='model: grammar')

			section.step.preview-grammar
				.number 3
				.contents
					h1 Preview your generator
					p(v-if='!exported.length') You need to export at least one sentence collection. Toggle the export button to the right of any sentence collection above.
					ul.generator-preview-buttons(v-if='exported.length')
						li(v-repeat='exported', v-on='click: previewGenerator($event, label)') {{label}}
					#generator-preview-contents

			section.step.save-grammar
				.number 4
				.contents
					h1 Save, export and share!
					p(v-if='!exported.length') You need to export at least one sentence collection. Toggle the export button to the right of any sentence collection above.
					div(v-if='exported.length')
						div
							.btn(v-on='click: exportRawGrammar') Export raw grammar
						div
							.btn(v-on='click: exportGrammarGenerator') Get garbage text generator
						div
							.export-type
								| Export as:
								label(for='radio-export-module')
									input(type='radio', id='radio-export-module', name='export-type', v-model='exportType', value='module')
									| CommonJS/AMD/browser module
								label(for='radio-export-executable')
									input(type='radio', id='radio-export-executable', name='export-type', v-model='exportType', value='executable')
									| Node.js executable
							.usage
								pre(v-if='exportType === "module"')
									| // CommonJS:
									| var Baba = require('./{{$root.grammarNameSlug}}')
									br
									br
									| // AMD:
									| define(['{{$root.grammarNameSlug}}'], function(Baba) { /* ... */ })
									br
									br
									| // Browser:
									| Baba // or window.Baba
									br
									br
									| // Get generated text
									div(v-repeat='slug: $root.exportedSlugs.slice(0, 3)')
										div(v-if='slug') var str{{$index + 1}} = Baba['{{slug}}']()
									| // ...
								pre(v-if='exportType === "executable"')
									| Usage: ./{{$root.grammarNameSlug}}.js [ {{ $root.exportedSlugs.join(' | ') }} ]
						div save as gist
						div preview exported sentences
						div tweet, share

		footer
			p
				| Baba Grammar Designer by
				=' '
				a(href='https://github.com/Lokaltog') Lokaltog
				=' Â· '
				a(href='https://github.com/Lokaltog/baba') GitHub repo

	#popup-import-grammar.popup.mfp-hide
		input.input-text(name='gist-uri', placeholder='Gist URI or ID')
		div.or
			.label or
		textarea.input-text(name='json', placeholder='Paste JSON source')
		.buttons
			button.btn.dismiss Import grammar

	#popup-export-grammar.popup.mfp-hide
		textarea.input-text
		.buttons
			button.btn.download Download
			button.btn.dismiss Close

	#popup-alert.popup.mfp-hide
		.text-wrap
			.text
			.icon
		.buttons
			button.btn.dismiss OK

	#popup-prompt.popup.mfp-hide
		.text-wrap
			.text
			.icon.question
		div.input
			input.input-text(name='value', placeholder='')
		div.buttons
			button.btn.dismiss OK

	#popup-confirm.popup.mfp-hide
		.text-wrap
			.text
			.icon.question
		div.buttons
			button.btn.confirm OK
			button.btn.dismiss Cancel

	script(id='grammar-template', type='text/x-template')
		h1(v-if='model !== $root.grammar')
			.toggle(v-on='click: open = !open')
				i.icon.icon-minus(v-if='open')
				i.icon.icon-plus(v-if='!open')
			.label
				input(placeholder='group name', v-model='model.label', data-autosize-input, v-on='blur: sortChildren(parentModel)')
			.comment
				input(placeholder='comment', v-model='model.comment', data-autosize-input)
			.delete(v-on='click: removeGroup(model, parentModel)')
				i.icon.icon-delete
			.export(v-if='model.type === "sentence"', v-on='click: model.export = !model.export')
				.exported(v-if='model.export') Exported
				.unexported
					.btn(v-if='!model.export') Export

		.node-wrapper(v-if='(model === $root.grammar) || open')
			section(v-repeat='model: model.children', v-with='parentModel: model', v-component='grammar')
			.add-section(v-if='typeof model.children !== "undefined"', v-on='click: addChild(model)') Add group
			div(v-if='model.type')
				.container-wrapper(v-class='model.type', v-with='model', v-component='container-{{model.type || "wordlist"}}')

		.section-init-wrapper(v-if='!model.type && typeof model.children === "undefined" && open')
			p What should this group contain?
			div(v-on='click: model.children = []') [Groups]
			div(v-on='click: addWordlist(model)') [A word list]
			div(v-on='click: addSentence(model)') [A sentence collection]

	script(id='container-wordlist-template', type='text/x-template')
		ul.builder.wordlist
			li.str(v-repeat='element: elements')
				.word {{element}}
				ul.actions
					li.delete(v-on='click: elements.$remove(element)')
						i.icon.icon-delete

			li
				input.text-element(type='text', placeholder='add string', data-autosize-input, v-on='keydown: addString | key enter')

	script(id='container-sentence-template', type='text/x-template')
		ul.builder.sentence(v-repeat='sentence: elements')
			li(v-repeat='element: sentence.sentence', v-class='str: element.str, ref: element.ref, preview: preview')
				div.menu-update-sentence-str(v-on='click: menuUpdateSentenceStr(this, element, sentence.sentence)', v-show='typeof element.str !== "undefined"')
					.string(v-show='!element.editStr') {{element.str}}
					input.text-element(type='text', placeholder='string', data-autosize-input, v-on='keydown: element.editStr = false | key enter', v-model='element.str', v-show='element.editStr')

				div.menu-update-sentence-ref(v-on='click: menuUpdateSentenceRef(this, element, sentence.sentence)', v-show='typeof element.ref !== "undefined"')
					.display(v-show='!preview')
						ol.prefix(v-if='element.transform && filterTransforms(element.transform, "prefix")')
							li(v-repeat='filterTransforms(element.transform, "prefix")') {{tag}}
							li(v-repeat='filterTransforms(element.transform, undefined)') {{label.toLowerCase()}}

						ol.components
							li(v-repeat='getGrammarComponents(element.ref)', v-class='key') {{label}}

						ol.suffix(v-if='element.transform && filterTransforms(element.transform, "suffix")')
							li(v-repeat='filterTransforms(element.transform, "suffix")') {{tag}}

					.preview(v-if='preview')
						ol.components
							li(v-class='getGrammarComponents(element.ref)[0].key')
								| {{getGrammarComponentPreview(element)}}

			li.buttons
				.btn.menu-add-element(v-show='!preview', v-on='click: menuAddElement(this, sentence.sentence)')
					i.icon.icon-add

			li.actions
				.refresh.btn(v-show='preview', v-on='click: updatePreview(model)')
					i.icon.icon-refresh

				.preview.btn(v-class='active: preview', v-on='click: preview = !preview') Preview
		div(v-on='click: elements.push({sentence:[]})') Add sentence

	script(src='/static/js/lib/vue.js')
	script(src='/static/js/lib/jquery-2.1.1.js')
	script(src='/static/js/lib/jquery.autosize.input.js')
	script(src='/static/js/lib/jquery.ui.position.js')
	script(src='/static/js/lib/jquery.contextMenu.js')
	script(src='/static/js/lib/jquery.magnific-popup.js')
	script(src='/static/js/lib/uglifyjs.min.js')
	script(src='/static/js/lib/FileSaver.js')
	script(src='/static/js/lib/uuid.js')
	script(src='/static/js/lib/seedrandom.js')
	script(src='/static/js/lib/string.js')
	script(src='/static/js/main.js')
