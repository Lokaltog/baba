doctype html
html(lang='en')
	head
		meta(charset='utf-8')
		meta(http-equiv='Content-Type', content='text/html;charset=utf-8')
		meta(name='viewport', content='width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no')

		title Baba Create-a-Generator

		link(rel='shortcut icon', href='/static/img/favicon.png')
		link(rel='stylesheet', href='/static/css/main.css', type='text/css')

	body
		header
			h1
				.title Baba Create-a-Generator
				.catchphrase
					.text
					.refresh
						i.icon.icon-refresh
			.actions
				.btn#import-grammar(href='#popup-import') Import generator
				.btn(v-on='click: generator = {}') Create new generator

		#contents
			section.step.name-grammar
				.number 1
				.contents
					.header
						h1 Name your text generator
					.name
						input.input-text#generator-name(type='text', v-model='generator.grammar.name', placeholder='Generator name', data-autosize-input)
						span.by by
						input.input-text#generator-author(type='text', v-model='generator.grammar.author', placeholder='Author', data-autosize-input)
					.comment
						textarea.input-text(v-model='generator.grammar.comment', placeholder='Generator comments')

			section.step.create-grammar
				.number 2
				.contents
					.header
						h1 Create the rules
						.add-section
							.link-btn(v-on='click: addChild($root.generator[tab])')
								i.icon.icon-folder.add
								| Add group
						ul.tabs
							li(v-class='active: tab === "grammar"', v-on='click: tab = "grammar"') Grammar
							li(v-class='active: tab === "transforms"', v-on='click: tab = "transforms"') Transforms

					.tree(v-component='tree', v-with='children: generator.grammar.children', v-show='!tab || tab === "grammar"')
					.tree(v-component='tree', v-with='children: generator.transforms.children', v-show='tab === "transforms"')

			section.step.preview-grammar
				.number 3
				.contents
					.header
						h1 Preview generated text
					p(v-if='!$root.generator.exposed') You need to expose at least one sentence collection. Toggle the expose button to the right of any sentence collection above.
					ul.generator-preview-buttons(v-if='$root.generator.exposed')
						li.link-btn(v-repeat='$root.generator.exposed', v-on='click: previewGenerator($event, getNode($value).node.label)')
							i.icon.icon-refresh
							| {{getNode($value).node.label}}
					#generator-preview-contents

			section.step.save-grammar
				.number 4
				.contents
					.header
						h1 Save, export and share!
					p(v-if='!$root.generator.exposed') You need to expose at least one sentence collection. Toggle the expose button to the right of any sentence collection above.
					div(v-if='$root.generator.exposed')
						div
							.btn(v-on='click: exportRawGenerator') Export raw JSON
						div
							.btn(v-on='click: exportGeneratorJS') Get text generator
						div
						div save as gist
						div preview exported sentences
						div tweet, share

		footer
			p
				| Baba Create-a-Generator by
				=' '
				a(href='https://github.com/Lokaltog') Lokaltog
				=' · '
				a(href='https://github.com/Lokaltog/baba') GitHub repo

	#popup-import.popup.mfp-hide
		input.input-text(name='gist-uri', placeholder='Gist URI or ID')
		.center-header
			.label or
		textarea.input-text(name='json', placeholder='Paste JSON source')
		.buttons
			select(name='merge-grammar')
				option(value='delete') Delete current generator
				option(value='merge') Merge with current generator
			button.btn.dismiss Import generator

	#popup-export-json.popup.mfp-hide
		textarea(disabled).input-text
		.buttons
			button.btn.download Download
			button.btn.dismiss Close

	#popup-export-generator.popup.mfp-hide
		ul.export-type
			li
				input(type='radio', id='radio-export-module', name='export-type', v-model='exportType', value='module')
				label(for='radio-export-module')
					i.icon.icon-plugin
					| CommonJS/AMD/browser module
			li
				input(type='radio', id='radio-export-executable', name='export-type', v-model='exportType', value='executable')
				label(for='radio-export-executable')
					i.icon.icon-cog
					| Node.js executable

		textarea(disabled).input-text

		h1.center-header
			.label Usage

		pre.usage(v-if='$root.exposedSlugs')
			div(v-if='exportType === "module"')
				| var Baba = require('./{{$root.grammarNameSlug}}') // CommonJS
				| define(['{{$root.grammarNameSlug}}'], function(Baba) { }) // AMD
				| Baba // Browser (alternatively window.Baba)
				br
				br
				| // Get generated text
				div(v-repeat='slug: $root.exposedSlugs.slice(0, 3)')
					div(v-if='slug') var str{{$index + 1}} = Baba.generator['{{slug}}']()
				| // ...
			div(v-if='exportType === "executable"')
				| node {{$root.grammarNameSlug}} [ {{ $root.exposedSlugs.join(' | ') }} ]

		.buttons
			button.btn.download Download
			button.btn.dismiss Close

	#popup-alert.popup.mfp-hide
		.text-wrap
			.text
			.icon
		.buttons
			button.btn.dismiss OK

	#popup-prompt.popup.mfp-hide
		.text-wrap
			.text
			.icon.question
		div.input
			input.input-text(name='value', placeholder='')
		div.buttons
			button.btn.dismiss Submit

	#popup-confirm.popup.mfp-hide
		.text-wrap
			.text
			.icon.question
		div.buttons
			button.btn.dismiss.yes Yes
			button.btn.dismiss.no No

	script(id='tree-template', type='text/x-template')
		.node(v-repeat='node: children', v-class='has-children: node.children, node.inline ? \'inline-\' + node.inline : \'\', no-ws: typeof node.whitespace !== "undefined" && !node.whitespace', data-weight='{{ node.weight }}')
			.header(v-if='node.name')
				.name {{ node.name }}
				.edit
					i.icon.icon-cog
			.children(v-if='node.children', v-component='tree', v-with='children: node.children', v-class='inline: node.inline')
			.contents(v-if='node.type')
				.str(v-if='node.type === "str"')
					| {{ node.value }}
				.ref(v-if='node.type === "ref"')
					i.icon.icon-cog
					| ref: {{ node.value }}
				.function(v-if='node.type === "fn"')
					i.icon.icon-plugin
					| {{ node.value }}
		.repeat(v-if='node.repeat.count')
			| {{ node.repeat.count[0] }}··{{ node.repeat.count[1] }}

	script(type='text/javascript', src='/static/js/main.bundle.js')
