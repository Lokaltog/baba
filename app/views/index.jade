doctype html
html(lang='en')
	head
		meta(charset='utf-8')
		meta(http-equiv='Content-Type', content='text/html;charset=utf-8')
		meta(name='viewport', content='width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no')

		title Baba Create-a-Generator by Lokaltog

		link(rel='shortcut icon', href='/static/img/favicon.png')
		link(rel='stylesheet', href='/static/css/main.css', type='text/css')

	body
		header
			h1
				.title Baba Create-a-Generator
				.catchphrase
					.text
					.refresh
						i.icon.icon-refresh
			.actions
				.btn#import-grammar(href='#popup-import') Import grammar
				.btn(v-on='click: generator = {}') Create new grammar

		#contents
			section.step.name-grammar
				.number 1
				.contents
					.header
						h1 Name your text generator
					div.name
						input.input-text#generator-name(type='text', v-model='generator.grammar.name', placeholder='Generator name', data-autosize-input)
						span.by by
						input.input-text#generator-author(type='text', v-model='generator.grammar.author', placeholder='Author', data-autosize-input)

			section.step.create-grammar
				.number 2
				.contents
					.header
						h1 Create the rules
						.add-section
							.link-btn(v-on='click: addChild($root.generator[tab])')
								i.icon.icon-folder.add
								| Add group
						ul.tabs
							li(v-class='active: tab === "grammar"', v-on='click: tab = "grammar"') Grammar
							li(v-class='active: tab === "transforms"', v-on='click: tab = "transforms"') Transforms

					section.tree.grammar(v-component='grammar', v-with='model: generator.grammar', v-show='!tab || tab === "grammar"')
					section.tree.transforms(v-component='transforms', v-with='model: generator.transforms', v-show='tab === "transforms"')

			section.step.preview-grammar
				.number 3
				.contents
					.header
						h1 Preview generated text
					p(v-if='!exported.length') You need to export at least one sentence collection. Toggle the export button to the right of any sentence collection above.
					ul.generator-preview-buttons(v-if='exported.length')
						li.link-btn(v-repeat='exported', v-on='click: previewGenerator($event, label)')
							i.icon.icon-refresh
							| {{label}}
					#generator-preview-contents

			section.step.save-grammar
				.number 4
				.contents
					.header
						h1 Save, export and share!
					p(v-if='!exported.length') You need to export at least one sentence collection. Toggle the export button to the right of any sentence collection above.
					div(v-if='exported.length')
						div
							.btn(v-on='click: exportRawGenerator') Export raw grammar
						div
							.btn(v-on='click: exportGrammarGenerator') Get text generator
						div
						div save as gist
						div preview exported sentences
						div tweet, share

		footer
			p
				| Baba Create-a-Generator by
				=' '
				a(href='https://github.com/Lokaltog') Lokaltog
				=' · '
				a(href='https://github.com/Lokaltog/baba') GitHub repo

	#popup-import.popup.mfp-hide
		input.input-text(name='gist-uri', placeholder='Gist URI or ID')
		.center-header
			.label or
		textarea.input-text(name='json', placeholder='Paste JSON source')
		.buttons
			button.btn.dismiss Import grammar

	#popup-export-json.popup.mfp-hide
		textarea(disabled).input-text
		.buttons
			button.btn.download Download
			button.btn.dismiss Close

	#popup-export-generator.popup.mfp-hide
		ul.export-type
			li
				input(type='radio', id='radio-export-module', name='export-type', v-model='exportType', value='module')
				label(for='radio-export-module')
					i.icon.icon-plugin
					| CommonJS/AMD/browser module
			li
				input(type='radio', id='radio-export-executable', name='export-type', v-model='exportType', value='executable')
				label(for='radio-export-executable')
					i.icon.icon-cog
					| Node.js executable

		textarea(disabled).input-text

		h1.center-header
			.label Usage

		pre.usage(v-if='$root.exportedSlugs')
			div(v-if='exportType === "module"')
				| var Baba = require('./{{$root.grammarNameSlug}}') // CommonJS
				| define(['{{$root.grammarNameSlug}}'], function(Baba) { }) // AMD
				| Baba // Browser (alternatively window.Baba)
				br
				br
				| // Get generated text
				div(v-repeat='slug: $root.exportedSlugs.slice(0, 3)')
					div(v-if='slug') var str{{$index + 1}} = Baba.generator['{{slug}}']()
				| // ...
			div(v-if='exportType === "executable"')
				| node {{$root.grammarNameSlug}} [ {{ $root.exportedSlugs.join(' | ') }} ]

		.buttons
			button.btn.download Download
			button.btn.dismiss Close

	#popup-alert.popup.mfp-hide
		.text-wrap
			.text
			.icon
		.buttons
			button.btn.dismiss OK

	#popup-prompt.popup.mfp-hide
		.text-wrap
			.text
			.icon.question
		div.input
			input.input-text(name='value', placeholder='')
		div.buttons
			button.btn.dismiss Submit

	#popup-confirm.popup.mfp-hide
		.text-wrap
			.text
			.icon.question
		div.buttons
			button.btn.dismiss.yes Yes
			button.btn.dismiss.no No

	script(id='grammar-template', type='text/x-template')
		.header(v-if='model !== $root.generator.grammar')
			.toggle(v-on='click: model.open = !model.open')
				i.icon.icon-minus(v-if='model.open')
				i.icon.icon-plus(v-if='!model.open')

			.label
				input(placeholder='group name', v-model='model.label', data-autosize-input, v-on='blur: sortByProperty(parentModel.children, "label")')

			.comment
				input(placeholder='comment', v-model='model.comment', data-autosize-input)

			.export(v-if='model.type === "sentence"', v-on='click: model.export = !model.export')
				.exported(v-if='model.export') Exported
				.unexported
					.btn(v-if='!model.export') Export

			.add-section(v-if='typeof model.children !== "undefined"')
				.link-btn(v-on='click: addChild(model)')
					i.icon.icon-folder.add
					| Subgroup
				.link-btn(v-on='click: addChild(model, "wordlist")')
					i.icon.icon-add
					| Word list
				.link-btn(v-on='click: addChild(model, "sentence")')
					i.icon.icon-add
					| Sentences

			.delete(v-on='click: removeGroup(model, parentModel)')
				i.icon.icon-delete

		.node-wrapper(v-if='(model === $root.generator.grammar) || model.open')
			section(v-repeat='model: model.children', v-with='parentModel: model', v-component='grammar')
			div(v-if='model.type')
				.container-wrapper(v-class='model.type', v-with='model', v-component='container-{{model.type || "wordlist"}}')

	script(id='container-wordlist-template', type='text/x-template')
		ul.builder.wordlist
			li.str(v-repeat='element: elements')
				.word {{element}}
				ul.actions
					li.delete(v-on='click: elements.$remove(element)')
						i.icon.icon-delete

			li
				input.text-element(type='text', placeholder='add string', data-autosize-input, v-on='keydown: addString | key enter')

	script(id='container-sentence-template', type='text/x-template')
		ul.builder.sentence(v-repeat='sentence: elements')
			li(v-repeat='element: sentence.sentence', v-class='str: element.str, ref: element.ref, preview: preview')
				div.menu-update-sentence-str(v-on='click: menuUpdateSentenceStr(this, element, sentence.sentence)', v-show='typeof element.str !== "undefined"')
					.string(v-show='!element.editStr') {{element.str}}
					input.text-element(type='text', placeholder='string', data-autosize-input, v-on='keydown: element.editStr = false | key enter', v-model='element.str', v-show='element.editStr')

				div.menu-update-sentence-ref(v-on='click: menuUpdateSentenceRef(this, element, sentence.sentence)', v-show='typeof element.ref !== "undefined"')
					.display(v-show='!preview')
						ol.prefix(v-if='element.transform && filterTransforms(element.transform, "prefix")')
							li(v-repeat='filterTransforms(element.transform, "prefix")') {{tag}}·
							li(v-repeat='filterTransforms(element.transform)') {{label.toLowerCase()}}

						ol.components
							li(v-repeat='getGrammarComponents(element.ref)', v-class='key') {{label}}

						ol.suffix(v-if='element.transform && filterTransforms(element.transform, "suffix")')
							li(v-repeat='filterTransforms(element.transform, "suffix")') ·{{tag}}

					.preview(v-if='preview')
						ol.components
							li(v-class='getGrammarComponents(element.ref)[0].key')
								| {{getGrammarComponentPreview(element)}}

			li.buttons
				.btn.menu-add-element(v-show='!preview', v-on='click: menuAddElement(this, sentence.sentence)')
					i.icon.icon-add

			li.actions
				.refresh.btn(v-show='preview', v-on='click: updatePreview(model)')
					i.icon.icon-refresh

				.preview.btn(v-class='active: preview', v-on='click: preview = !preview') Preview

		.add-section
			.link-btn(v-on='click: elements.push({sentence:[]})')
				i.icon.icon-add
				| Add sentence

	script(id='transforms-template', type='text/x-template')
		section(v-repeat='transform: model.children', v-with='parentModel: transform')
			.header
				.toggle(v-on='click: transform.open = !transform.open')
					i.icon.icon-minus(v-if='transform.open')
					i.icon.icon-plus(v-if='!transform.open')

				.label
					input(placeholder='transform name', v-model='transform.label', data-autosize-input, v-on='blur: sortByProperty(parentModel.children, "label")')

				.tag(v-if='!transform.children')
					input(placeholder='set tag', v-model='transform.tag', data-autosize-input)

				.type(v-if='!transform.children')
					select(v-model='transform.type')
						option(value='') (none)
						option(value='prefix') prefix
						option(value='suffix') suffix

				.add-section
					.link-btn(v-on='click: addChild(transform || $root.generator.transforms)')
						i.icon.icon-folder.add
						| Add group
					.link-btn(v-on='click: addChild(transform, "transforms")')
						i.icon.icon-add
						| Transform

				.delete(v-on='click: removeGroup(transform, parentModel || $root.generator.transforms)')
					i.icon.icon-delete

			.node-wrapper(v-if='(transform === $root.generator.transforms) || transform.open')
				div(v-if='transform.children', v-component='transforms', v-with='model: transform, parentModel: transform')
				ul
					li.transform(v-repeat='tf: transform.transforms')
						.function(v-if='typeof tf === "function" || typeof tf === "string"')
							textarea.input-text(v-on='change: updateTransformFunction($event, transform.transforms, $index)') {{tf}}
						.regex(v-if='typeof tf === "object"')
							input.input-text(v-on='change: updateTransformRegex($event, transform.transforms, tf, 0)', value='{{tf[0]}}')
							.divider
							input.input-text(v-on='change: updateTransformRegex($event, transform.transforms, tf, 1)', value='{{tf[1]}}')
						ul.actions
							li.up(v-on='click: swapItems(transform.transforms, $index, $index - 1)')
							li.down(v-on='click: swapItems(transform.transforms, $index, $index + 1)')
							li.delete(v-on='click: transform.transforms.$remove(tf)')
				.add-transform(v-if='typeof transform.children === "undefined"')
					.add-regex.link-btn(v-on='click: addTransformRegex(transform)')
						i.icon.icon-add
						| Add regex
					.add-function.link-btn(v-on='click: addTransformFunction(transform)')
						i.icon.icon-plugin
						| Add function
				.test(v-if='transform.transforms')
					input.input-text(v-on='keyup: testTransform($event, transform.transforms)', placeholder='Test transform')
					.divider
					.transform-test

	script(src='/static/js/main.js')
