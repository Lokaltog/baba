doctype html
html(lang='en')
	head
		meta(charset='utf-8')
		meta(http-equiv='Content-Type', content='text/html;charset=utf-8')
		meta(name='viewport', content='width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no')

		title Baba Grammar Creator

		link(rel='stylesheet', href='/static/css/main.css', type='text/css')

	body
		header
			h1 Baba
			.slogan Garbage text generator
			.import [import from gist]

		#contents
			section.step.name-grammar
				.number 1
				.contents
					h1 Name your grammar
					div input field for name

			section.step.create-grammar
				.number 2
				.contents
					h1 Create your grammar
					section.grammar(v-component='grammar', v-with='model: grammar')

			section.step.save-grammar
				.number 3
				.contents
					h1 Save and export your grammar
					div save as gist
					div export as JS module
					div preview exported sentences
					div tweet, share

		footer
			p
				| Baba Grammar Creator by Kim Silkebækken
				=' · '
				a(href='https://github.com/Lokaltog/baba') GitHub repo

	script(id='grammar-template', type='text/x-template')
		h1(v-if='model !== $root.grammar', v-show='model.label')
			.toggle-wrap(v-on='click: open = !open')
				.toggle
					i.icon.icon-minus(v-if='open')
					i.icon.icon-plus(v-if='!open')
				.label {{model.label}}
			.comment
				input(placeholder='comment', data-autosize-input)
		.node-wrapper(v-show='(model === $root.grammar) || open')
			section(v-repeat='model: model.children', v-component='grammar')
			ul.builder(v-class='model.type', v-with='model', v-component='container-{{model.type || "wordlist"}}', v-if='model.elements && model.type')

	script(id='container-wordlist-template', type='text/x-template')
		li.expr(v-repeat='elements | orderBy "expr"')
			.word {{expr}}
			ul.actions
				li.delete(v-on='click:deletePhrase(this)')
					i.icon.icon-delete

		li.add-textfield
			input(type='text', placeholder='add phrase', data-autosize-input, v-on='keydown:addPhrase | key enter')

	script(id='container-sentence-template', type='text/x-template')
		li(v-repeat='elements', v-component='container-sentence-{{expr ? "expr" : "path"}}', v-class='expr: expr, path: path, preview: preview')

		li.buttons
			.dropdown-menu.btn(v-if='!preview')
				i.icon.icon-add
				ul.dropdown
					li.static-phrase
						.label Phrase
					li(v-repeat='model: $root.grammar.children', v-component='add-dropdown')

		li.actions
			.refresh.btn(v-if='preview', v-on='click: preview = preview')
				i.icon.icon-refresh

			.preview.btn(v-class='active: preview', v-on='click: preview = !preview') Preview

	script(id='container-sentence-expr-template', type='text/x-template')
		.word {{expr}}
		ul.actions(v-if='!preview')
			li.edit
				i.icon.icon-edit
			li.delete
				i.icon.icon-delete

	script(id='container-sentence-path-template', type='text/x-template')
		.display(v-if='!preview')
			ol.prefix(v-if='prefix')
				li(v-repeat='prefix') {{this.$get($value).label}}
			ol.components
				li(v-repeat='getGrammarComponents(path)', v-class='key') {{label}}
			ol.postfix(v-if='postfix')
				li(v-repeat='postfix') {{this.$get($value).label}}
			ul.actions(v-if='!preview')
				li.edit
					i.icon.icon-edit
				li.delete
					i.icon.icon-delete
		.preview(v-if='preview')
			ol.components
				li(v-class='getGrammarComponents(path)[0].key')
					| {{getGrammarPreview(path, prefix, postfix)}}

	script(id='add-dropdown-template', type='text/x-template')
		.dropdown-menu(v-class='has-children: model.children')
			.label {{model.label}}
			ul.dropdown(v-repeat='model: model.children')
				li(v-component='add-dropdown', v-with='model: model')

	script(src='/static/js/lib/vue.js')
	script(src='/static/js/lib/jquery-2.1.1.js')
	script(src='/static/js/lib/jquery.autosize.input.js')
	script(src='/static/js/lib/uglifyjs.min.js')
	script(src='/static/js/lib/uuid.js')
	script(src='/static/js/lib/seedrandom.js')
	script(src='/static/js/lib/string.js')
	script(src='/static/js/main.js')
