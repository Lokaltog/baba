doctype html
html(lang='en')
	head
		meta(charset='utf-8')
		meta(http-equiv='Content-Type', content='text/html;charset=utf-8')
		meta(name='viewport', content='width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no')

		title Baba Grammar Designer

		link(rel='shortcut icon', href='/static/img/favicon.png')
		link(rel='stylesheet', href='/static/css/main.css', type='text/css')

	body
		header
			h1 Baba Grammar Designer
			.import
				.btn Import from gist

		#contents
			section.step.name-grammar
				.number 1
				.contents
					h1 Name your grammar
					div.name
						input.input-text(type='text', v-model='grammar.name', placeholder='Grammar name', data-autosize-input)
						span.by by
						input.input-text(type='text', v-model='grammar.author', placeholder='Author', data-autosize-input)

			section.step.create-grammar
				.number 2
				.contents
					h1
						| Create the rules
						.add.btn(v-on='click: grammar.children.push({})') Add section
					section.grammar(v-component='grammar', v-with='model: grammar')

			section.step.preview-grammar
				.number 3
				.contents
					h1 Preview your grammar
					p(v-if='!exported.length') You need to export at least one sentence collection. Toggle the export button to the right of any sentence collection above.
					ul(v-if='exported.length')
						li(v-repeat='exported')
							.label {{label}}

			section.step.save-grammar
				.number 4
				.contents
					h1 Save, export and share
					div
						.btn(v-on='click: exportRawGrammar') Export raw grammar
					div
						.btn(v-on='click: exportGrammarGenerator') Get garbage text generator
					div save as gist
					div preview exported sentences
					div tweet, share

		footer
			p
				| Baba Grammar Designer by
				=' '
				a(href='https://github.com/Lokaltog') Lokaltog
				=' Â· '
				a(href='https://github.com/Lokaltog/baba') GitHub repo

	script(id='grammar-template', type='text/x-template')
		h1(v-if='model !== $root.grammar')
			.toggle(v-on='click: open = !open')
				i.icon.icon-minus(v-if='open')
				i.icon.icon-plus(v-if='!open')
			.label
				input(placeholder='section name', v-model='model.label', data-autosize-input)
			.comment
				input(placeholder='comment', v-model='model.comment', data-autosize-input)
			.export(v-if='model.type === "sentence"', v-on='click: model.export = !model.export')
				.exported(v-show='model.export') Exported
				.unexported
					.btn(v-show='!model.export') Export

		.node-wrapper(v-show='(model === $root.grammar) || open')
			section(v-repeat='model: model.children | orderBy "label"', v-component='grammar')
			.add-section(v-if='typeof model.children !== "undefined"', v-on='click: model.children.push({})') Add section
			div(v-if='model.type')
				.container-wrapper(v-class='model.type', v-with='model', v-component='container-{{model.type || "wordlist"}}')

		.section-init-wrapper(v-if='!model.type && typeof model.children === "undefined"', v-show='open')
			p What should this section contain?
			div(v-on='click: model.children = []') [Subsections]
			div(v-on='click: addWordlist(model)') [A word list]
			div(v-on='click: addSentence(model)') [A sentence collection]

	script(id='container-wordlist-template', type='text/x-template')
		ul.builder.wordlist
			li.expr(v-repeat='element: elements | orderBy "expr"')
				.word {{element.expr}}
				ul.actions
					li.delete(v-on='click: elements.$remove(element)')
						i.icon.icon-delete

			li.add-textfield
				input(type='text', placeholder='add phrase', data-autosize-input, v-on='keydown:addPhrase | key enter')

	script(id='container-sentence-template', type='text/x-template')
		ul.builder.sentence(v-repeat='sentence: elements')
			li(v-repeat='element: sentence.sentence', v-component='container-sentence-{{element.expr ? "expr" : "ref"}}', v-class='expr: element.expr, ref: element.ref, preview: preview')

			li.buttons
				.contextmenu-trigger.btn(v-show='!preview')
					i.icon.icon-add
				ul.contextmenu(v-show='!preview')
					li.divider-after
						.label.dismiss Static phrase
					li(v-repeat='model: $root.grammar.children | orderBy "label"', v-component='add-element-contextmenu', v-with='elements: sentence.sentence')

			li.actions
				.refresh.btn(v-show='preview', v-on='click: model = model')
					i.icon.icon-refresh

				.preview.btn(v-class='active: preview', v-on='click: preview = !preview') Preview
		div(v-on='click: elements.push({sentence:[]})') Add sentence

	script(id='container-sentence-expr-template', type='text/x-template')
		.word.contextmenu-trigger {{element.expr}}
		ul.contextmenu
			li.divider-after
				.label Edit
			li(v-repeat='model: $root.grammar.children | orderBy "label"', v-component='update-element-contextmenu', v-with='elements: elements, element: element')
			li.divider-before.remove(v-on='click: sentence.sentence.$remove(element)')
				.label Remove

	script(id='container-sentence-ref-template', type='text/x-template')
		.display(v-show='!preview')
			ol.prefix(v-if='element.transform && filterTransforms(element.transform, "prefix")')
				li(v-repeat='filterTransforms(element.transform, "prefix")') {{label}}

			ol.components.contextmenu-trigger
				li(v-repeat='getGrammarComponents(element.ref)', v-class='key') {{label}}
			ul.contextmenu(v-show='!preview')
				li.divider-after
					.item.has-children
						.label Transform
						ul.contextmenu
							li
								.item.has-children
									.label Group

				li(v-repeat='model: $root.grammar.children | orderBy "label"', v-component='update-element-contextmenu', v-with='elements: elements, element: element')
				li.divider-before
					.label.dismiss Convert to phrase
				li
					.label.dismiss Assign variable
				li.divider-before(v-on='click: element.transform = []')
					.label.dismiss Clear transforms
				li.remove(v-on='click: sentence.sentence.$remove(element)')
					.label.dismiss Remove

			ol.postfix(v-if='element.transform && filterTransforms(element.transform, "postfix")')
				li(v-repeat='filterTransforms(element.transform, "postfix")') {{label}}

		.preview(v-if='preview')
			ol.components
				li(v-class='getGrammarComponents(element.ref)[0].key')
					| {{getGrammarComponentPreview(element)}}

	script(id='add-element-contextmenu-template', type='text/x-template')
		.item(v-class='has-children: model.children')
			.label(v-on='click: addElement(elements)', v-class='dismiss: !model.children') {{model.label}}
			ul.contextmenu(v-if='model.children')
				li(v-repeat='model: model.children | orderBy "label"', v-component='add-element-contextmenu')

	script(id='update-element-contextmenu-template', type='text/x-template')
		.item(v-class='has-children: model.children')
			.label(v-on='click: !model.children ? updateElement(element) : []', v-class='dismiss: !model.children') {{model.label}}
			ul.contextmenu(v-if='model.children')
				li(v-repeat='model: model.children | orderBy "label"', v-component='update-element-contextmenu')

	script(src='/static/js/lib/vue.js')
	script(src='/static/js/lib/jquery-2.1.1.js')
	script(src='/static/js/lib/jquery.autosize.input.js')
	script(src='/static/js/lib/uglifyjs.min.js')
	script(src='/static/js/lib/uuid.js')
	script(src='/static/js/lib/seedrandom.js')
	script(src='/static/js/lib/string.js')
	script(src='/static/js/main.js')
